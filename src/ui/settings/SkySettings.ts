import * as THREE from 'three';
import { Pane } from 'tweakpane';
import { skyUniforms } from '../../atmosphere/SkyUniforms';

export function setupSkySettings(pane: Pane, scene: THREE.Scene) {
  const folder = pane.addFolder({ title: 'üå§ –ù–µ–±–æ' });
  
  const params = {
    skyColor: { r: 128, g: 200, b: 255 },
    horizonColor: { r: 255, g: 230, b: 200 },
    horizonFade: 0.5,
    cloudDensity: 0.5,
    cloudSpeed: 0.25,
    exposure: 1.0,
    airDensity: 0.01,
    showStars: true,
    starIntensity: 0.5,
    preset: '–¢–µ–∫—É—â–∏–π'
  };
  
  // –¶–≤–µ—Ç –Ω–µ–±–∞
  folder.addInput(params, 'skyColor', { 
    view: 'color',
    label: '–¶–≤–µ—Ç –Ω–µ–±–∞'
  }).on('change', (ev) => {
    if (scene.background instanceof THREE.Color) {
      scene.background.setRGB(
        ev.value.r / 255,
        ev.value.g / 255,
        ev.value.b / 255
      );
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —é–Ω–∏—Ñ–æ—Ä–º—ã —à–µ–π–¥–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
    if (skyUniforms && skyUniforms.fogColor) {
      skyUniforms.fogColor.value.setRGB(
        ev.value.r / 255,
        ev.value.g / 255,
        ev.value.b / 255
      );
    }
  });
  
  // –¶–≤–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
  folder.addInput(params, 'horizonColor', { 
    view: 'color',
    label: '–¶–≤–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞'
  }).on('change', (ev) => {
    if (skyUniforms && skyUniforms.horizonColor) {
      skyUniforms.horizonColor.value.setRGB(
        ev.value.r / 255,
        ev.value.g / 255,
        ev.value.b / 255
      );
    }
  });
  
  // –†–∞–∑–º—ã—Ç–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞
  folder.addInput(params, 'horizonFade', {
    min: 0,
    max: 1,
    step: 0.01,
    label: '–†–∞–∑–º—ã—Ç–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞'
  }).on('change', (ev) => {
    if (skyUniforms && skyUniforms.horizonFade) {
      skyUniforms.horizonFade.value = ev.value;
    }
  });
  
  // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ–±–ª–∞–∫–æ–≤
  folder.addInput(params, 'cloudDensity', {
    min: 0,
    max: 1,
    step: 0.01,
    label: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ–±–ª–∞–∫–æ–≤'
  }).on('change', (ev) => {
    if (skyUniforms && skyUniforms.cloudDensity) {
      skyUniforms.cloudDensity.value = ev.value;
    }
  });
  
  // –°–∫–æ—Ä–æ—Å—Ç—å –æ–±–ª–∞–∫–æ–≤
  folder.addInput(params, 'cloudSpeed', {
    min: 0,
    max: 1,
    step: 0.01,
    label: '–°–∫–æ—Ä–æ—Å—Ç—å –æ–±–ª–∞–∫–æ–≤'
  }).on('change', (ev) => {
    if (skyUniforms && skyUniforms.cloudSpeed) {
      skyUniforms.cloudSpeed.value = ev.value;
    }
  });
  
  // –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è
  folder.addInput(params, 'exposure', {
    min: 0.1,
    max: 2,
    step: 0.1,
    label: '–Ø—Ä–∫–æ—Å—Ç—å –Ω–µ–±–∞'
  }).on('change', (ev) => {
    if (skyUniforms && skyUniforms.exposure) {
      skyUniforms.exposure.value = ev.value;
    }
  });
  
  // –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞
  folder.addInput(params, 'airDensity', {
    min: 0.001,
    max: 0.1,
    step: 0.001,
    label: '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞'
  }).on('change', (ev) => {
    if (skyUniforms && skyUniforms.airDensity) {
      skyUniforms.airDensity.value = ev.value;
    }
  });
  
  // –ó–≤–µ–∑–¥—ã
  folder.addInput(params, 'showStars', {
    label: '–ü–æ–∫–∞–∑–∞—Ç—å –∑–≤–µ–∑–¥—ã'
  });
  
  folder.addInput(params, 'starIntensity', {
    min: 0,
    max: 1,
    step: 0.01,
    label: '–Ø—Ä–∫–æ—Å—Ç—å –∑–≤–µ–∑–¥'
  });
  
  // –ü—Ä–µ—Å–µ—Ç—ã
  folder.addInput(params, 'preset', {
    label: '–ü—Ä–µ—Å–µ—Ç',
    options: {
      '–¢–µ–∫—É—â–∏–π': '–¢–µ–∫—É—â–∏–π',
      '–Ø—Å–Ω—ã–π –¥–µ–Ω—å': '–Ø—Å–Ω—ã–π –¥–µ–Ω—å',
      '–ó–∞–∫–∞—Ç': '–ó–∞–∫–∞—Ç',
      '–ù–æ—á—å': '–ù–æ—á—å',
      '–¢—É–º–∞–Ω–Ω–æ–µ —É—Ç—Ä–æ': '–¢—É–º–∞–Ω–Ω–æ–µ —É—Ç—Ä–æ'
    }
  }).on('change', (ev) => {
    switch (ev.value) {
      case '–Ø—Å–Ω—ã–π –¥–µ–Ω—å':
        params.skyColor = { r: 128, g: 200, b: 255 };
        params.horizonColor = { r: 255, g: 230, b: 200 };
        params.horizonFade = 0.5;
        params.cloudDensity = 0.3;
        params.exposure = 1.2;
        params.airDensity = 0.01;
        params.showStars = false;
        break;
      case '–ó–∞–∫–∞—Ç':
        params.skyColor = { r: 100, g: 120, b: 200 };
        params.horizonColor = { r: 255, g: 180, b: 120 };
        params.horizonFade = 0.3;
        params.cloudDensity = 0.6;
        params.exposure = 1.0;
        params.airDensity = 0.02;
        params.showStars = false;
        break;
      case '–ù–æ—á—å':
        params.skyColor = { r: 10, g: 20, b: 50 };
        params.horizonColor = { r: 30, g: 40, b: 80 };
        params.horizonFade = 0.7;
        params.cloudDensity = 0.4;
        params.exposure = 0.5;
        params.airDensity = 0.005;
        params.showStars = true;
        params.starIntensity = 0.8;
        break;
      case '–¢—É–º–∞–Ω–Ω–æ–µ —É—Ç—Ä–æ':
        params.skyColor = { r: 180, g: 190, b: 200 };
        params.horizonColor = { r: 200, g: 200, b: 210 };
        params.horizonFade = 0.2;
        params.cloudDensity = 0.8;
        params.exposure = 0.9;
        params.airDensity = 0.03;
        params.showStars = false;
        break;
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if (scene.background instanceof THREE.Color) {
      scene.background.setRGB(
        params.skyColor.r / 255,
        params.skyColor.g / 255,
        params.skyColor.b / 255
      );
    }
    
    if (skyUniforms) {
      if (skyUniforms.fogColor) {
        skyUniforms.fogColor.value.setRGB(
          params.skyColor.r / 255,
          params.skyColor.g / 255,
          params.skyColor.b / 255
        );
      }
      
      if (skyUniforms.horizonColor) {
        skyUniforms.horizonColor.value.setRGB(
          params.horizonColor.r / 255,
          params.horizonColor.g / 255,
          params.horizonColor.b / 255
        );
      }
      
      if (skyUniforms.horizonFade) skyUniforms.horizonFade.value = params.horizonFade;
      if (skyUniforms.cloudDensity) skyUniforms.cloudDensity.value = params.cloudDensity;
      if (skyUniforms.cloudSpeed) skyUniforms.cloudSpeed.value = params.cloudSpeed;
      if (skyUniforms.exposure) skyUniforms.exposure.value = params.exposure;
      if (skyUniforms.airDensity) skyUniforms.airDensity.value = params.airDensity;
    }
  });
}










